#!/bin/ash
SCRIPT_NAME=$(basename -- "$0")
log() {
    printf "[INFO] ${SCRIPT_NAME}: %s\n" "$@"
}
logd() {
    if [ ${DEBUG:-} ]; then
        printf "[DEBUG] ${SCRIPT_NAME}: %s\n" "$@"
    fi
}

set_consul_performance() {
	PERFORMANCE=$1 sh -c "{ rm /etc/consul/consul.json;jq '.performance.raft_multiplier=(env.PERFORMANCE|tonumber)' >/etc/consul/consul.json; } < /etc/consul/consul.json"
}

# Add the Consul CA to the trusted list
if [ ! -e /etc/ssl/certs/ca-consul.done ] && [ -e /etc/tls/ca.pem ]; then
	cat /etc/tls/ca.pem >> /etc/ssl/certs/ca-certificates.crt &&\
	touch /etc/ssl/certs/ca-consul.done
fi
chown -f consul:consul /etc/tls/* 2>/dev/null

# Performance configuration for Cloud providers
# See https://www.consul.io/docs/guides/performance.html
if [ "${CONSUL_PERFORMANCE:=default}" = 'max' ]; then
	set_consul_performance 1
elif [ "$CONSUL_PERFORMANCE" = 'auto' ]; then
	# Amazon EC2
	if [ -f /sys/hypervisor/uuid ] && [ "$(head -c 3 /sys/hypervisor/uuid | tr '[:lower:]' '[:upper:]')" = 'EC2' ] &&
		EC2_INSTANCE-TYPE="$(wget -q -O- 'http://169.254.169.254/latest/meta-data/instance-type' | awk -F. '{print $2}')"; then
		case "${EC2_INSTANCE-TYPE}" in
			nano)   set_consul_performance 6 ;;
			micro)  set_consul_performance 5 ;;
			small)  set_consul_performance 3 ;;
			medium) set_consul_performance 2 ;;
			*large) set_consul_performance 1 ;;
		esac
	# GCE
	elif [ -f /sys/class/dmi/id/bios_vendor ] && grep -iq 'Google' /sys/class/dmi/id/bios_vendor &&
		GCE_MACHINE-TYPE="$(wget -q -O- --header 'Metadata-Flavor: Google' 'http://metadata.google.internal/computeMetadata/v1/instance/machine-type'| awk -F/ '{print $NF}')"; then
		case "${GCE_MACHINE-TYPE}" in
			f1-micro) set_consul_performance 5 ;;
			g1-small) set_consul_performance 3 ;;
			*)        set_consul_performance 1 ;;
		esac
	# MS Azure
	elif [ -f /sys/class/dmi/id/bios_vendor ] && grep -iq 'Hyper-V UEFI' /sys/class/dmi/id/bios_version &&
		AZURE_VMSIZE="$(wget -q -O- --header 'Metadata: true' 'http://169.254.169.254/metadata/instance/compute/vmSize?api-version=2017-12-01')" ; then
		case "${AZURE_VMSIZE}" in
			Standard_A0*) set_consul_performance 5 ;;
			Standard_A1*) set_consul_performance 3 ;;
			Standard_A2*) set_consul_performance 2 ;;
			*)            set_consul_performance 1 ;;
		esac
	fi
else
	log "Using Consul default performance settings"
fi

# Detect if we are running on Joyent Triton (Illumos)
# Assign a privilege spec to the process that allows it to chown files,
# access high resolution timers and change its process id
if [ "$(uname -v)" = 'BrandZ virtual linux' ]; then # Joyent Triton (Illumos)
	/native/usr/bin/ppriv -s LI+FILE_CHOWN,PROC_CLOCK_HIGHRES,PROC_SETID $$
	# Detect if Consul needs to bind to low ports
	CONSUL_LOWEST_PORT=$(jq '.ports|map(numbers)|min' /etc/consul/consul.json)
	if [ "$CONSUL_LOWEST_PORT" -le 1024 ]; then
		# Assign a privilege spec to the process that allows it to bind to low ports
		/native/usr/bin/ppriv -s LI+NET_PRIVADDR $$
	fi
fi


if [ -e "/data/raft/raft.db" ]; then # This is a restart
	logd 'Starting Consul'
	unset CONSUL_ENCRYPT_TOKEN
	unset CONSUL_BOOTSTRAP_HOST
	unset CONSUL_CLUSTER_SIZE

	exec -a consul consul agent -server -ui -config-dir=/etc/consul/ -data-dir=/data -datacenter="$CONSUL_DC_NAME" -domain="${CONSUL_DOMAIN:=consul}" -retry-join="$CONSUL_DNS_NAME" -rejoin

else # This is the first start
	if [ "$CONSUL_DC_NAME" ] && [ "$CONSUL_ENCRYPT_TOKEN" ] && [ "$CONSUL_CLUSTER_SIZE" ] && [ "$CONSUL_DNS_NAME" ]; then
		logd 'Starting Consul for the first time, using CONSUL_DC_NAME & BOOTSTRAP_HOST environment variables'
		# Create Consul's data directory
		mkdir -p -m 775 /data
		chown -R consul:consul /data

		# ACL Datacenter configuration
		if [ -z "$CONSUL_ACL_DC" ]; then
			log "ACL Datacenter not defined, defaulting to $CONSUL_DC_NAME"
			export CONSUL_ACL_DC="$CONSUL_DC_NAME"
		fi
		sh -c "{ rm /etc/consul/consul.json; jq '.acl_datacenter = env.CONSUL_ACL_DC' > /etc/consul/consul.json; } < /etc/consul/consul.json"

	# Log Consul bootstrap host to the console
		if [ "${CONSUL_BOOTSTRAP_HOST:-127.0.0.1}" = 127.0.0.1 ]; then
			logd "Bootstrap host is $(hostname -s)"
			logd "Please remember to bootstrap the ACL system by running: curl --cert client_certificate.pem --key client_certificate.key --cacert ca.pem -XPUT 'https://${CONSUL_DNS_NAME:-consul.service.consul}:$(jq '.ports.https' /etc/consul/consul.json)/v1/acl/bootstrap'"
		else
			logd "Bootstrap host is ${CONSUL_BOOTSTRAP_HOST}"
		fi

		exec -a consul consul agent -server -ui -config-dir=/etc/consul/ -data-dir=/data -datacenter="$CONSUL_DC_NAME" -domain="${CONSUL_DOMAIN:=consul}" -bootstrap-expect="$CONSUL_CLUSTER_SIZE" -retry-join=consul -retry-join="${CONSUL_BOOTSTRAP_HOST:-127.0.0.1}" -retry-join="$CONSUL_DNS_NAME" -encrypt="$CONSUL_ENCRYPT_TOKEN"
	else
		printf 'Consul agent configuration\nUsage\n-----\n' >&2
		printf 'You must always set the following environment variables to run this container:\nCONSUL_DC_NAME: The desired name for your Consul datacenter\n\n' >&2
		printf 'The following environment variables are mandatory only on the first run of the container:\nCONSUL_ENCRYPT_TOKEN: RPC encryption token, can be generated by running consul keygen\nCONSUL_CLUSTER_SIZE: The expected number of server nodes in your cluster\nCONSUL_DNS_NAME: The DNS name for your cluster (eg: consul.service.consul)\n\n' >&2
		printf 'The following environment variables are used to configure the cluster (if provided):\nCONSUL_ACL_DC: The Consul ACL Datacenter, defaults to the value of CONSUL_DC_NAME if not provided\nCONSUL_BOOTSTRAP_HOST: A Consul server node to join on startup, only used the first time the container runs. Defaults to 127.0.0.1\nCONSUL_ENVIRONMENT: if set to "prod", it will configure Consul for high performance. If it is not set and you are running on AWS EC2, Google Cloud Engine (GCE) ot Azure, a performance setting will be set according to your instance type\n\n' >&2
		exit 1
	fi
fi
